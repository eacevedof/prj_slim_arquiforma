<?php
/**
 * This class has been auto-generated by PHP-DI.
 */
class CompiledContainer extends DI\CompiledContainer{
    const METHOD_MAPPING = array (
  'App\\Slim\\Domain\\User\\UserRepository' => 'get1',
  'Psr\\Log\\LoggerInterface' => 'get2',
  'App\\Modules\\Shared\\Infrastructure\\Components\\TplReader' => 'get3',
  'App\\Slim\\Application\\Settings\\SettingsInterface' => 'get4',
);

    protected function get1()
    {
        $object = new App\Slim\Infrastructure\Persistence\User\InMemoryUserRepository(NULL);
        return $object;
    }

    protected function get2()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
            $settings = $c->get(\App\Slim\Application\Settings\SettingsInterface::class);

            $loggerSettings = $settings->get("logger");
            $logger = new \Monolog\Logger($loggerSettings["name"]);

            $processor = new \Monolog\Processor\UidProcessor();
            $logger->pushProcessor($processor);

            $handler = new \Monolog\Handler\StreamHandler($loggerSettings["path"], $loggerSettings["level"]);
            $logger->pushHandler($handler);

            return $logger;
        }, 'Psr\\Log\\LoggerInterface');
    }

    protected function get3()
    {
        return $this->resolveFactory(static function (\Psr\Container\ContainerInterface $c) {
            $views = PATH_ROOT . "/src/Modules/Views";
            $cache = PATH_ROOT . "/var/cache";
            return \App\Modules\Shared\Infrastructure\Components\TplReader::fromPrimitives([
                "pathViews" => $views,
                "pathCache" => $cache,
            ]);
        }, 'App\\Modules\\Shared\\Infrastructure\\Components\\TplReader');
    }

    protected function get4()
    {
        return $this->resolveFactory(static function () {
            return new \App\Slim\Application\Settings\Settings([
                'displayErrorDetails' => true, // Should be set to false in production
                'logError'            => false,
                'logErrorDetails'     => false,
                'logger' => [
                    'name' => 'slim-app',
                    'path' => isset($_ENV['docker']) ? 'php://stdout' : 'C:\\projects\\prj-slim\\backend_web\\app' . '/../logs/app.log',
                    'level' => \Monolog\Logger::DEBUG,
                ],
            ]);
        }, 'App\\Slim\\Application\\Settings\\SettingsInterface');
    }

}
